/*
 * Generated by gdbus-codegen 2.32.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __REALM_DBUS_GENERATED_H__
#define __REALM_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Service */

#define REALM_DBUS_TYPE_SERVICE (realm_dbus_service_get_type ())
#define REALM_DBUS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_SERVICE, RealmDbusService))
#define REALM_DBUS_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_SERVICE))
#define REALM_DBUS_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_SERVICE, RealmDbusServiceIface))

struct _RealmDbusService;
typedef struct _RealmDbusService RealmDbusService;
typedef struct _RealmDbusServiceIface RealmDbusServiceIface;

struct _RealmDbusServiceIface
{
  GTypeInterface parent_iface;

  GVariant * (*get_providers) (RealmDbusService *object);

};

GType realm_dbus_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_service_interface_info (void);
guint realm_dbus_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
GVariant *realm_dbus_service_get_providers (RealmDbusService *object);
GVariant *realm_dbus_service_dup_providers (RealmDbusService *object);
void realm_dbus_service_set_providers (RealmDbusService *object, GVariant *value);


/* ---- */

#define REALM_DBUS_TYPE_SERVICE_PROXY (realm_dbus_service_proxy_get_type ())
#define REALM_DBUS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_SERVICE_PROXY, RealmDbusServiceProxy))
#define REALM_DBUS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_SERVICE_PROXY, RealmDbusServiceProxyClass))
#define REALM_DBUS_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_SERVICE_PROXY, RealmDbusServiceProxyClass))
#define REALM_DBUS_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_SERVICE_PROXY))
#define REALM_DBUS_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_SERVICE_PROXY))

typedef struct _RealmDbusServiceProxy RealmDbusServiceProxy;
typedef struct _RealmDbusServiceProxyClass RealmDbusServiceProxyClass;
typedef struct _RealmDbusServiceProxyPrivate RealmDbusServiceProxyPrivate;

struct _RealmDbusServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusServiceProxyPrivate *priv;
};

struct _RealmDbusServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_service_proxy_get_type (void) G_GNUC_CONST;

void realm_dbus_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusService *realm_dbus_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusService *realm_dbus_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusService *realm_dbus_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusService *realm_dbus_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_SERVICE_SKELETON (realm_dbus_service_skeleton_get_type ())
#define REALM_DBUS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_SERVICE_SKELETON, RealmDbusServiceSkeleton))
#define REALM_DBUS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_SERVICE_SKELETON, RealmDbusServiceSkeletonClass))
#define REALM_DBUS_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_SERVICE_SKELETON, RealmDbusServiceSkeletonClass))
#define REALM_DBUS_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_SERVICE_SKELETON))
#define REALM_DBUS_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_SERVICE_SKELETON))

typedef struct _RealmDbusServiceSkeleton RealmDbusServiceSkeleton;
typedef struct _RealmDbusServiceSkeletonClass RealmDbusServiceSkeletonClass;
typedef struct _RealmDbusServiceSkeletonPrivate RealmDbusServiceSkeletonPrivate;

struct _RealmDbusServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusServiceSkeletonPrivate *priv;
};

struct _RealmDbusServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_service_skeleton_get_type (void) G_GNUC_CONST;

RealmDbusService *realm_dbus_service_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Provider */

#define REALM_DBUS_TYPE_PROVIDER (realm_dbus_provider_get_type ())
#define REALM_DBUS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_PROVIDER, RealmDbusProvider))
#define REALM_DBUS_IS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_PROVIDER))
#define REALM_DBUS_PROVIDER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_PROVIDER, RealmDbusProviderIface))

struct _RealmDbusProvider;
typedef struct _RealmDbusProvider RealmDbusProvider;
typedef struct _RealmDbusProviderIface RealmDbusProviderIface;

struct _RealmDbusProviderIface
{
  GTypeInterface parent_iface;

  void (*diagnostics) (
    RealmDbusProvider *object,
    const gchar *arg_data);

};

GType realm_dbus_provider_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_provider_interface_info (void);
guint realm_dbus_provider_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void realm_dbus_provider_emit_diagnostics (
    RealmDbusProvider *object,
    const gchar *arg_data);



/* ---- */

#define REALM_DBUS_TYPE_PROVIDER_PROXY (realm_dbus_provider_proxy_get_type ())
#define REALM_DBUS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_PROVIDER_PROXY, RealmDbusProviderProxy))
#define REALM_DBUS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_PROVIDER_PROXY, RealmDbusProviderProxyClass))
#define REALM_DBUS_PROVIDER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_PROVIDER_PROXY, RealmDbusProviderProxyClass))
#define REALM_DBUS_IS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_PROVIDER_PROXY))
#define REALM_DBUS_IS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_PROVIDER_PROXY))

typedef struct _RealmDbusProviderProxy RealmDbusProviderProxy;
typedef struct _RealmDbusProviderProxyClass RealmDbusProviderProxyClass;
typedef struct _RealmDbusProviderProxyPrivate RealmDbusProviderProxyPrivate;

struct _RealmDbusProviderProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusProviderProxyPrivate *priv;
};

struct _RealmDbusProviderProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_provider_proxy_get_type (void) G_GNUC_CONST;

void realm_dbus_provider_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusProvider *realm_dbus_provider_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusProvider *realm_dbus_provider_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_provider_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusProvider *realm_dbus_provider_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusProvider *realm_dbus_provider_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_PROVIDER_SKELETON (realm_dbus_provider_skeleton_get_type ())
#define REALM_DBUS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_PROVIDER_SKELETON, RealmDbusProviderSkeleton))
#define REALM_DBUS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_PROVIDER_SKELETON, RealmDbusProviderSkeletonClass))
#define REALM_DBUS_PROVIDER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_PROVIDER_SKELETON, RealmDbusProviderSkeletonClass))
#define REALM_DBUS_IS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_PROVIDER_SKELETON))
#define REALM_DBUS_IS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_PROVIDER_SKELETON))

typedef struct _RealmDbusProviderSkeleton RealmDbusProviderSkeleton;
typedef struct _RealmDbusProviderSkeletonClass RealmDbusProviderSkeletonClass;
typedef struct _RealmDbusProviderSkeletonPrivate RealmDbusProviderSkeletonPrivate;

struct _RealmDbusProviderSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusProviderSkeletonPrivate *priv;
};

struct _RealmDbusProviderSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_provider_skeleton_get_type (void) G_GNUC_CONST;

RealmDbusProvider *realm_dbus_provider_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.realmd.Kerberos */

#define REALM_DBUS_TYPE_KERBEROS (realm_dbus_kerberos_get_type ())
#define REALM_DBUS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS, RealmDbusKerberos))
#define REALM_DBUS_IS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS))
#define REALM_DBUS_KERBEROS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_TYPE_KERBEROS, RealmDbusKerberosIface))

struct _RealmDbusKerberos;
typedef struct _RealmDbusKerberos RealmDbusKerberos;
typedef struct _RealmDbusKerberosIface RealmDbusKerberosIface;

struct _RealmDbusKerberosIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_discover_realm) (
    RealmDbusKerberos *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_string);

  gboolean (*handle_enroll_machine_with_kerberos_cache) (
    RealmDbusKerberos *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_realm,
    GVariant *arg_kerberos_cache);

  gboolean (*handle_unenroll_machine_with_kerberos_cache) (
    RealmDbusKerberos *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_realm,
    GVariant *arg_kerberos_cache);

  const gchar *const * (*get_enrolled_realms) (RealmDbusKerberos *object);

};

GType realm_dbus_kerberos_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_kerberos_interface_info (void);
guint realm_dbus_kerberos_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void realm_dbus_kerberos_complete_discover_realm (
    RealmDbusKerberos *object,
    GDBusMethodInvocation *invocation,
    const gchar *realm,
    GVariant *discovered);

void realm_dbus_kerberos_complete_enroll_machine_with_kerberos_cache (
    RealmDbusKerberos *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_kerberos_complete_unenroll_machine_with_kerberos_cache (
    RealmDbusKerberos *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void realm_dbus_kerberos_call_discover_realm (
    RealmDbusKerberos *proxy,
    const gchar *arg_string,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_kerberos_call_discover_realm_finish (
    RealmDbusKerberos *proxy,
    gchar **out_realm,
    GVariant **out_discovered,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_kerberos_call_discover_realm_sync (
    RealmDbusKerberos *proxy,
    const gchar *arg_string,
    gchar **out_realm,
    GVariant **out_discovered,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_kerberos_call_enroll_machine_with_kerberos_cache (
    RealmDbusKerberos *proxy,
    const gchar *arg_realm,
    GVariant *arg_kerberos_cache,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_kerberos_call_enroll_machine_with_kerberos_cache_finish (
    RealmDbusKerberos *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_kerberos_call_enroll_machine_with_kerberos_cache_sync (
    RealmDbusKerberos *proxy,
    const gchar *arg_realm,
    GVariant *arg_kerberos_cache,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_kerberos_call_unenroll_machine_with_kerberos_cache (
    RealmDbusKerberos *proxy,
    const gchar *arg_realm,
    GVariant *arg_kerberos_cache,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_kerberos_call_unenroll_machine_with_kerberos_cache_finish (
    RealmDbusKerberos *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_kerberos_call_unenroll_machine_with_kerberos_cache_sync (
    RealmDbusKerberos *proxy,
    const gchar *arg_realm,
    GVariant *arg_kerberos_cache,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *realm_dbus_kerberos_get_enrolled_realms (RealmDbusKerberos *object);
gchar **realm_dbus_kerberos_dup_enrolled_realms (RealmDbusKerberos *object);
void realm_dbus_kerberos_set_enrolled_realms (RealmDbusKerberos *object, const gchar *const *value);


/* ---- */

#define REALM_DBUS_TYPE_KERBEROS_PROXY (realm_dbus_kerberos_proxy_get_type ())
#define REALM_DBUS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_PROXY, RealmDbusKerberosProxy))
#define REALM_DBUS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_KERBEROS_PROXY, RealmDbusKerberosProxyClass))
#define REALM_DBUS_KERBEROS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_KERBEROS_PROXY, RealmDbusKerberosProxyClass))
#define REALM_DBUS_IS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_PROXY))
#define REALM_DBUS_IS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_KERBEROS_PROXY))

typedef struct _RealmDbusKerberosProxy RealmDbusKerberosProxy;
typedef struct _RealmDbusKerberosProxyClass RealmDbusKerberosProxyClass;
typedef struct _RealmDbusKerberosProxyPrivate RealmDbusKerberosProxyPrivate;

struct _RealmDbusKerberosProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusKerberosProxyPrivate *priv;
};

struct _RealmDbusKerberosProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_kerberos_proxy_get_type (void) G_GNUC_CONST;

void realm_dbus_kerberos_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_kerberos_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusKerberos *realm_dbus_kerberos_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_TYPE_KERBEROS_SKELETON (realm_dbus_kerberos_skeleton_get_type ())
#define REALM_DBUS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_TYPE_KERBEROS_SKELETON, RealmDbusKerberosSkeleton))
#define REALM_DBUS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_TYPE_KERBEROS_SKELETON, RealmDbusKerberosSkeletonClass))
#define REALM_DBUS_KERBEROS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_TYPE_KERBEROS_SKELETON, RealmDbusKerberosSkeletonClass))
#define REALM_DBUS_IS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_TYPE_KERBEROS_SKELETON))
#define REALM_DBUS_IS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_TYPE_KERBEROS_SKELETON))

typedef struct _RealmDbusKerberosSkeleton RealmDbusKerberosSkeleton;
typedef struct _RealmDbusKerberosSkeletonClass RealmDbusKerberosSkeletonClass;
typedef struct _RealmDbusKerberosSkeletonPrivate RealmDbusKerberosSkeletonPrivate;

struct _RealmDbusKerberosSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusKerberosSkeletonPrivate *priv;
};

struct _RealmDbusKerberosSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_kerberos_skeleton_get_type (void) G_GNUC_CONST;

RealmDbusKerberos *realm_dbus_kerberos_skeleton_new (void);


G_END_DECLS

#endif /* __REALM_DBUS_GENERATED_H__ */
