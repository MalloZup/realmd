#!/usr/bin/python

import getopt
import os
import sys

import SSSDConfig

# The default value, but normally overridden by an argument
SSSD_CONF_PATH = "/etc/sssd/sssd.conf"

def realm_to_domain(realm):
	return realm.lower()

def domain_to_basedn(domain):
	return ",".join(["dc=%s" % part for part in domain.split(".")])

def add_realm_to_sssd_conf(realm):
	sssdconfig = SSSDConfig.SSSDConfig()
	if os.path.exists(SSSD_CONF_PATH):
		print "Importing already existing %s file" % SSSD_CONF_PATH
		sssdconfig.import_config(SSSD_CONF_PATH)
	else:
		print "Setting up new SSSD config"
		sssdconfig.new_config()

	domain_name = realm_to_domain(realm)

	try:
		domain = sssdconfig.new_domain(domain_name)
	except SSSDConfig.DomainAlreadyExistsError:
		print "The domain %s is already configured in SSSD config. Aborting configuration." % domain_name
		return 1

	basedn = domain_to_basedn(domain_name)

	print "Configuring for Active Directory"
	print "   Domain: %s" % domain_name
	print "   Realm: %s" % realm
	print "   Base DN: %s" % basedn

	domain.add_provider('ldap', 'id')
	domain.add_provider('krb5', 'auth')
	domain.add_provider('krb5', 'chpass')
	domain.add_provider('ldap', 'access')

	domain.set_option('cache_credentials', True)
	domain.set_option('enumerate', False)

	domain.set_option('ldap_sasl_mech', 'GSSAPI')
	# TODO: This will be replaced with idmap once SSSD support is done
	domain.set_option('ldap_schema', 'rfc2307bis')
	domain.set_option('ldap_user_search_base', "ou=user accounts,%s" % basedn)
	domain.set_option('ldap_user_object_class', 'user')
	domain.set_option('ldap_user_home_directory', 'unixHomeDirectory')
	domain.set_option('ldap_user_principal', 'userPrincipalName')
	domain.set_option('ldap_group_search_base', "ou=groups,%s" % basedn)
	domain.set_option('ldap_group_object_class', 'group')
	# TODO: Figure out why this gives a NoOptionError
	# domain.set_option('ldap_access_order', 'expire')
	# TODO: Figure out why this gives a NoOptionError
	# domain.set_option('ldap_account_expire_policy', 'ad')
	domain.set_option('ldap_force_upper_case_realm', True)

	domain.set_option('krb5_realm', realm)
	domain.set_option('krb5_store_password_if_offline', True)

	domain.set_active(True)
	sssdconfig.save_domain(domain)

	print "Writing out %s file" % SSSD_CONF_PATH
	sssdconfig.write(SSSD_CONF_PATH)

	return 0


def remove_realm_from_sssd_conf(realm):
	if not os.path.exists(SSSD_CONF_PATH):
		print "No %s file, assuming SSSD is not configured"
		return

	print "Importing %s file" % SSSD_CONF_PATH
	sssdconfig = SSSDConfig.SSSDConfig()
	sssdconfig.import_config(SSSD_CONF_PATH)

	domain_name = realm_to_domain(realm)

	domains = sssdconfig.list_active_domains()
	for name in domains:
		if name == domain_name:
			print "Deleting %s domain from SSSD config" % domain_name
			sssdconfig.delete_domain(domain_name)
			break
	else:
		print "No domain %s found in SSSD config" % domain_name

	print "Writing out %s file" % SSSD_CONF_PATH
	sssdconfig.write(SSSD_CONF_PATH)

	return 0


def usage():
	print >> sys.stderr, "usage: ads-provider-sssd [-s ssdconf] add realm"
	print >> sys.stderr, "       ads-provider-sssd [-s ssdconf] remove realm"
	sys.exit(2)


if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hc", ["help", "config"])
	except getopt.GetoptError, err:
		print >> sys.stderr, str(err)
		usage()

	verbose = False
	for o, a in opts:
		if o in ("-c", "--config"):
			SSSD_CONF_PATH = a
		elif o in ("-h", "--help"):
			usage()
		else:
			assert False, "unhandled option"

	if len(args) != 2:
		usage()
	elif args[0] == "add":
		ret = add_realm_to_sssd_conf(args[1])
	elif args[0] == "remove":
		ret = remove_realm_from_sssd_conf(args[1])
	else:
		usage()

	sys.exit(ret)
