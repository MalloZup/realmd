/*
 * Generated by gdbus-codegen 2.33.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __REALM_DBUS_SYSTEMD_H__
#define __REALM_DBUS_SYSTEMD_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.systemd1.Manager */

#define REALM_DBUS_SYSTEMD_TYPE_MANAGER (realm_dbus_systemd_manager_get_type ())
#define REALM_DBUS_SYSTEMD_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER, RealmDbusSystemdManager))
#define REALM_DBUS_SYSTEMD_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER))
#define REALM_DBUS_SYSTEMD_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER, RealmDbusSystemdManagerIface))

struct _RealmDbusSystemdManager;
typedef struct _RealmDbusSystemdManager RealmDbusSystemdManager;
typedef struct _RealmDbusSystemdManagerIface RealmDbusSystemdManagerIface;

struct _RealmDbusSystemdManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_clear_jobs) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create_snapshot) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    gboolean arg_cleanup);

  gboolean (*handle_disable_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime);

  gboolean (*handle_dump) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enable_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_exit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_job) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_get_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_get_unit_by_pid) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_pid);

  gboolean (*handle_get_unit_file_state) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_file);

  gboolean (*handle_halt) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_kexec) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_kill_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_who,
    const gchar *arg_mode,
    gint arg_signal);

  gboolean (*handle_link_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_list_jobs) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_units) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_load_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_mask_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_power_off) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_preset_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_reboot) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reenable_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force);

  gboolean (*handle_reexecute) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reload) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reload_or_restart_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_reload_or_try_restart_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_reload_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_reset_failed) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reset_failed_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_restart_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_set_environment) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names);

  gboolean (*handle_start_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_start_unit_replace) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_old_unit,
    const gchar *arg_new_unit,
    const gchar *arg_mode);

  gboolean (*handle_stop_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_subscribe) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_try_restart_unit) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_mode);

  gboolean (*handle_unmask_unit_files) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_files,
    gboolean arg_runtime);

  gboolean (*handle_unset_and_set_environment) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_unset,
    const gchar *const *arg_set);

  gboolean (*handle_unset_environment) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_names);

  gboolean (*handle_unsubscribe) (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_confirm_spawn) (RealmDbusSystemdManager *object);

  const gchar * (*get_control_group_hierarchy) (RealmDbusSystemdManager *object);

  const gchar *const * (*get_default_controllers) (RealmDbusSystemdManager *object);

  const gchar * (*get_default_standard_error) (RealmDbusSystemdManager *object);

  const gchar * (*get_default_standard_output) (RealmDbusSystemdManager *object);

  const gchar * (*get_distribution) (RealmDbusSystemdManager *object);

  const gchar *const * (*get_environment) (RealmDbusSystemdManager *object);

  const gchar * (*get_features) (RealmDbusSystemdManager *object);

  guint64  (*get_finish_timestamp) (RealmDbusSystemdManager *object);

  guint64  (*get_finish_timestamp_monotonic) (RealmDbusSystemdManager *object);

  guint64  (*get_init_rdtimestamp) (RealmDbusSystemdManager *object);

  guint64  (*get_init_rdtimestamp_monotonic) (RealmDbusSystemdManager *object);

  const gchar * (*get_log_level) (RealmDbusSystemdManager *object);

  const gchar * (*get_log_target) (RealmDbusSystemdManager *object);

  gboolean  (*get_mount_auto) (RealmDbusSystemdManager *object);

  guint  (*get_nfailed_jobs) (RealmDbusSystemdManager *object);

  guint  (*get_ninstalled_jobs) (RealmDbusSystemdManager *object);

  guint  (*get_njobs) (RealmDbusSystemdManager *object);

  guint  (*get_nnames) (RealmDbusSystemdManager *object);

  const gchar * (*get_notify_socket) (RealmDbusSystemdManager *object);

  gdouble  (*get_progress) (RealmDbusSystemdManager *object);

  const gchar * (*get_running_as) (RealmDbusSystemdManager *object);

  gboolean  (*get_show_status) (RealmDbusSystemdManager *object);

  guint64  (*get_startup_timestamp) (RealmDbusSystemdManager *object);

  guint64  (*get_startup_timestamp_monotonic) (RealmDbusSystemdManager *object);

  gboolean  (*get_swap_auto) (RealmDbusSystemdManager *object);

  gboolean  (*get_sys_vconsole) (RealmDbusSystemdManager *object);

  const gchar *const * (*get_sys_vinit_path) (RealmDbusSystemdManager *object);

  const gchar *const * (*get_sys_vrcnd_path) (RealmDbusSystemdManager *object);

  const gchar * (*get_tainted) (RealmDbusSystemdManager *object);

  const gchar *const * (*get_unit_path) (RealmDbusSystemdManager *object);

  const gchar * (*get_version) (RealmDbusSystemdManager *object);

  void (*job_new) (
    RealmDbusSystemdManager *object,
    guint arg_id,
    const gchar *arg_job);

  void (*job_removed) (
    RealmDbusSystemdManager *object,
    guint arg_id,
    const gchar *arg_job,
    const gchar *arg_result);

  void (*startup_finished) (
    RealmDbusSystemdManager *object,
    guint64 arg_kernel,
    guint64 arg_initrd,
    guint64 arg_userspace,
    guint64 arg_total);

  void (*unit_files_changed) (
    RealmDbusSystemdManager *object);

  void (*unit_new) (
    RealmDbusSystemdManager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

  void (*unit_removed) (
    RealmDbusSystemdManager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

};

GType realm_dbus_systemd_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *realm_dbus_systemd_manager_interface_info (void);
guint realm_dbus_systemd_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void realm_dbus_systemd_manager_complete_get_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void realm_dbus_systemd_manager_complete_get_unit_by_pid (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void realm_dbus_systemd_manager_complete_load_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void realm_dbus_systemd_manager_complete_start_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_start_unit_replace (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_stop_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_reload_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_restart_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_try_restart_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_reload_or_restart_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_reload_or_try_restart_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_kill_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_reset_failed_unit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_get_job (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *job);

void realm_dbus_systemd_manager_complete_clear_jobs (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_reset_failed (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_list_units (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *units);

void realm_dbus_systemd_manager_complete_list_jobs (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *jobs);

void realm_dbus_systemd_manager_complete_subscribe (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_unsubscribe (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_dump (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_create_snapshot (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unit);

void realm_dbus_systemd_manager_complete_reload (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_reexecute (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_exit (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_reboot (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_power_off (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_halt (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_kexec (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_set_environment (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_unset_environment (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_unset_and_set_environment (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation);

void realm_dbus_systemd_manager_complete_list_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_get_unit_file_state (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *state);

void realm_dbus_systemd_manager_complete_enable_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_disable_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_reenable_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_link_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_preset_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    gboolean carries_install_info,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_mask_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);

void realm_dbus_systemd_manager_complete_unmask_unit_files (
    RealmDbusSystemdManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *changes);



/* D-Bus signal emissions functions: */
void realm_dbus_systemd_manager_emit_unit_new (
    RealmDbusSystemdManager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

void realm_dbus_systemd_manager_emit_unit_removed (
    RealmDbusSystemdManager *object,
    const gchar *arg_id,
    const gchar *arg_unit);

void realm_dbus_systemd_manager_emit_job_new (
    RealmDbusSystemdManager *object,
    guint arg_id,
    const gchar *arg_job);

void realm_dbus_systemd_manager_emit_job_removed (
    RealmDbusSystemdManager *object,
    guint arg_id,
    const gchar *arg_job,
    const gchar *arg_result);

void realm_dbus_systemd_manager_emit_startup_finished (
    RealmDbusSystemdManager *object,
    guint64 arg_kernel,
    guint64 arg_initrd,
    guint64 arg_userspace,
    guint64 arg_total);

void realm_dbus_systemd_manager_emit_unit_files_changed (
    RealmDbusSystemdManager *object);



/* D-Bus method calls: */
void realm_dbus_systemd_manager_call_get_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_get_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_get_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_get_unit_by_pid (
    RealmDbusSystemdManager *proxy,
    guint arg_pid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_get_unit_by_pid_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_get_unit_by_pid_sync (
    RealmDbusSystemdManager *proxy,
    guint arg_pid,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_load_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_load_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_load_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_start_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_start_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_start_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_start_unit_replace (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_old_unit,
    const gchar *arg_new_unit,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_start_unit_replace_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_start_unit_replace_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_old_unit,
    const gchar *arg_new_unit,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_stop_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_stop_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_stop_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reload_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reload_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reload_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_restart_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_restart_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_restart_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_try_restart_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_try_restart_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_try_restart_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reload_or_restart_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reload_or_restart_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reload_or_restart_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reload_or_try_restart_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reload_or_try_restart_unit_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reload_or_try_restart_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_mode,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_kill_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_who,
    const gchar *arg_mode,
    gint arg_signal,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_kill_unit_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_kill_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    const gchar *arg_who,
    const gchar *arg_mode,
    gint arg_signal,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reset_failed_unit (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reset_failed_unit_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reset_failed_unit_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_get_job (
    RealmDbusSystemdManager *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_get_job_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_job,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_get_job_sync (
    RealmDbusSystemdManager *proxy,
    guint arg_id,
    gchar **out_job,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_clear_jobs (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_clear_jobs_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_clear_jobs_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reset_failed (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reset_failed_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reset_failed_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_list_units (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_list_units_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_units,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_list_units_sync (
    RealmDbusSystemdManager *proxy,
    GVariant **out_units,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_list_jobs (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_list_jobs_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_jobs,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_list_jobs_sync (
    RealmDbusSystemdManager *proxy,
    GVariant **out_jobs,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_subscribe (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_subscribe_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_subscribe_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_unsubscribe (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_unsubscribe_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_unsubscribe_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_dump (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_dump_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_dump_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_create_snapshot (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    gboolean arg_cleanup,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_create_snapshot_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_unit,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_create_snapshot_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_name,
    gboolean arg_cleanup,
    gchar **out_unit,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reload (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reload_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reload_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reexecute (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reexecute_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reexecute_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_exit (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_exit_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_exit_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reboot (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reboot_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reboot_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_power_off (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_power_off_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_power_off_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_halt (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_halt_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_halt_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_kexec (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_kexec_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_kexec_sync (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_set_environment (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_set_environment_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_set_environment_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_unset_environment (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_unset_environment_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_unset_environment_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_names,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_unset_and_set_environment (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_unset,
    const gchar *const *arg_set,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_unset_and_set_environment_finish (
    RealmDbusSystemdManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_unset_and_set_environment_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_unset,
    const gchar *const *arg_set,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_list_unit_files (
    RealmDbusSystemdManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_list_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_list_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_get_unit_file_state (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_file,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_get_unit_file_state_finish (
    RealmDbusSystemdManager *proxy,
    gchar **out_state,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_get_unit_file_state_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *arg_file,
    gchar **out_state,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_enable_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_enable_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_enable_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_disable_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_disable_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_disable_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_reenable_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_reenable_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_reenable_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_link_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_link_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_link_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_preset_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_preset_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_preset_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    gboolean *out_carries_install_info,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_mask_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_mask_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_mask_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    gboolean arg_force,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);

void realm_dbus_systemd_manager_call_unmask_unit_files (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean realm_dbus_systemd_manager_call_unmask_unit_files_finish (
    RealmDbusSystemdManager *proxy,
    GVariant **out_changes,
    GAsyncResult *res,
    GError **error);

gboolean realm_dbus_systemd_manager_call_unmask_unit_files_sync (
    RealmDbusSystemdManager *proxy,
    const gchar *const *arg_files,
    gboolean arg_runtime,
    GVariant **out_changes,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *realm_dbus_systemd_manager_get_version (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_version (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_version (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_distribution (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_distribution (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_distribution (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_features (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_features (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_features (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_tainted (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_tainted (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_tainted (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_running_as (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_running_as (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_running_as (RealmDbusSystemdManager *object, const gchar *value);

guint64 realm_dbus_systemd_manager_get_init_rdtimestamp (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_init_rdtimestamp (RealmDbusSystemdManager *object, guint64 value);

guint64 realm_dbus_systemd_manager_get_init_rdtimestamp_monotonic (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_init_rdtimestamp_monotonic (RealmDbusSystemdManager *object, guint64 value);

guint64 realm_dbus_systemd_manager_get_startup_timestamp (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_startup_timestamp (RealmDbusSystemdManager *object, guint64 value);

guint64 realm_dbus_systemd_manager_get_startup_timestamp_monotonic (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_startup_timestamp_monotonic (RealmDbusSystemdManager *object, guint64 value);

guint64 realm_dbus_systemd_manager_get_finish_timestamp (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_finish_timestamp (RealmDbusSystemdManager *object, guint64 value);

guint64 realm_dbus_systemd_manager_get_finish_timestamp_monotonic (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_finish_timestamp_monotonic (RealmDbusSystemdManager *object, guint64 value);

const gchar *realm_dbus_systemd_manager_get_log_level (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_log_level (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_log_level (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_log_target (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_log_target (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_log_target (RealmDbusSystemdManager *object, const gchar *value);

guint realm_dbus_systemd_manager_get_nnames (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_nnames (RealmDbusSystemdManager *object, guint value);

guint realm_dbus_systemd_manager_get_njobs (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_njobs (RealmDbusSystemdManager *object, guint value);

guint realm_dbus_systemd_manager_get_ninstalled_jobs (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_ninstalled_jobs (RealmDbusSystemdManager *object, guint value);

guint realm_dbus_systemd_manager_get_nfailed_jobs (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_nfailed_jobs (RealmDbusSystemdManager *object, guint value);

gdouble realm_dbus_systemd_manager_get_progress (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_progress (RealmDbusSystemdManager *object, gdouble value);

const gchar *const *realm_dbus_systemd_manager_get_environment (RealmDbusSystemdManager *object);
gchar **realm_dbus_systemd_manager_dup_environment (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_environment (RealmDbusSystemdManager *object, const gchar *const *value);

gboolean realm_dbus_systemd_manager_get_confirm_spawn (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_confirm_spawn (RealmDbusSystemdManager *object, gboolean value);

gboolean realm_dbus_systemd_manager_get_show_status (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_show_status (RealmDbusSystemdManager *object, gboolean value);

const gchar *const *realm_dbus_systemd_manager_get_unit_path (RealmDbusSystemdManager *object);
gchar **realm_dbus_systemd_manager_dup_unit_path (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_unit_path (RealmDbusSystemdManager *object, const gchar *const *value);

const gchar *realm_dbus_systemd_manager_get_notify_socket (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_notify_socket (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_notify_socket (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_control_group_hierarchy (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_control_group_hierarchy (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_control_group_hierarchy (RealmDbusSystemdManager *object, const gchar *value);

gboolean realm_dbus_systemd_manager_get_mount_auto (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_mount_auto (RealmDbusSystemdManager *object, gboolean value);

gboolean realm_dbus_systemd_manager_get_swap_auto (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_swap_auto (RealmDbusSystemdManager *object, gboolean value);

const gchar *const *realm_dbus_systemd_manager_get_default_controllers (RealmDbusSystemdManager *object);
gchar **realm_dbus_systemd_manager_dup_default_controllers (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_default_controllers (RealmDbusSystemdManager *object, const gchar *const *value);

const gchar *realm_dbus_systemd_manager_get_default_standard_output (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_default_standard_output (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_default_standard_output (RealmDbusSystemdManager *object, const gchar *value);

const gchar *realm_dbus_systemd_manager_get_default_standard_error (RealmDbusSystemdManager *object);
gchar *realm_dbus_systemd_manager_dup_default_standard_error (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_default_standard_error (RealmDbusSystemdManager *object, const gchar *value);

gboolean realm_dbus_systemd_manager_get_sys_vconsole (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_sys_vconsole (RealmDbusSystemdManager *object, gboolean value);

const gchar *const *realm_dbus_systemd_manager_get_sys_vinit_path (RealmDbusSystemdManager *object);
gchar **realm_dbus_systemd_manager_dup_sys_vinit_path (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_sys_vinit_path (RealmDbusSystemdManager *object, const gchar *const *value);

const gchar *const *realm_dbus_systemd_manager_get_sys_vrcnd_path (RealmDbusSystemdManager *object);
gchar **realm_dbus_systemd_manager_dup_sys_vrcnd_path (RealmDbusSystemdManager *object);
void realm_dbus_systemd_manager_set_sys_vrcnd_path (RealmDbusSystemdManager *object, const gchar *const *value);


/* ---- */

#define REALM_DBUS_SYSTEMD_TYPE_MANAGER_PROXY (realm_dbus_systemd_manager_proxy_get_type ())
#define REALM_DBUS_SYSTEMD_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER_PROXY, RealmDbusSystemdManagerProxy))
#define REALM_DBUS_SYSTEMD_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_SYSTEMD_TYPE_MANAGER_PROXY, RealmDbusSystemdManagerProxyClass))
#define REALM_DBUS_SYSTEMD_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER_PROXY, RealmDbusSystemdManagerProxyClass))
#define REALM_DBUS_SYSTEMD_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER_PROXY))
#define REALM_DBUS_SYSTEMD_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_SYSTEMD_TYPE_MANAGER_PROXY))

typedef struct _RealmDbusSystemdManagerProxy RealmDbusSystemdManagerProxy;
typedef struct _RealmDbusSystemdManagerProxyClass RealmDbusSystemdManagerProxyClass;
typedef struct _RealmDbusSystemdManagerProxyPrivate RealmDbusSystemdManagerProxyPrivate;

struct _RealmDbusSystemdManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RealmDbusSystemdManagerProxyPrivate *priv;
};

struct _RealmDbusSystemdManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType realm_dbus_systemd_manager_proxy_get_type (void) G_GNUC_CONST;

void realm_dbus_systemd_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusSystemdManager *realm_dbus_systemd_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusSystemdManager *realm_dbus_systemd_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void realm_dbus_systemd_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RealmDbusSystemdManager *realm_dbus_systemd_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RealmDbusSystemdManager *realm_dbus_systemd_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define REALM_DBUS_SYSTEMD_TYPE_MANAGER_SKELETON (realm_dbus_systemd_manager_skeleton_get_type ())
#define REALM_DBUS_SYSTEMD_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER_SKELETON, RealmDbusSystemdManagerSkeleton))
#define REALM_DBUS_SYSTEMD_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), REALM_DBUS_SYSTEMD_TYPE_MANAGER_SKELETON, RealmDbusSystemdManagerSkeletonClass))
#define REALM_DBUS_SYSTEMD_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER_SKELETON, RealmDbusSystemdManagerSkeletonClass))
#define REALM_DBUS_SYSTEMD_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), REALM_DBUS_SYSTEMD_TYPE_MANAGER_SKELETON))
#define REALM_DBUS_SYSTEMD_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), REALM_DBUS_SYSTEMD_TYPE_MANAGER_SKELETON))

typedef struct _RealmDbusSystemdManagerSkeleton RealmDbusSystemdManagerSkeleton;
typedef struct _RealmDbusSystemdManagerSkeletonClass RealmDbusSystemdManagerSkeletonClass;
typedef struct _RealmDbusSystemdManagerSkeletonPrivate RealmDbusSystemdManagerSkeletonPrivate;

struct _RealmDbusSystemdManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RealmDbusSystemdManagerSkeletonPrivate *priv;
};

struct _RealmDbusSystemdManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType realm_dbus_systemd_manager_skeleton_get_type (void) G_GNUC_CONST;

RealmDbusSystemdManager *realm_dbus_systemd_manager_skeleton_new (void);


G_END_DECLS

#endif /* __REALM_DBUS_SYSTEMD_H__ */
