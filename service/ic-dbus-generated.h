/*
 * Generated by gdbus-codegen 2.31.22. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __IC_DBUS_GENERATED_H__
#define __IC_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.IdentityConfig.Service */

#define IC_DBUS_TYPE_SERVICE (ic_dbus_service_get_type ())
#define IC_DBUS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_SERVICE, IcDbusService))
#define IC_DBUS_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_SERVICE))
#define IC_DBUS_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), IC_DBUS_TYPE_SERVICE, IcDbusServiceIface))

struct _IcDbusService;
typedef struct _IcDbusService IcDbusService;
typedef struct _IcDbusServiceIface IcDbusServiceIface;

struct _IcDbusServiceIface
{
  GTypeInterface parent_iface;

  const gchar *const * (*get_available_providers) (IcDbusService *object);

};

GType ic_dbus_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ic_dbus_service_interface_info (void);
guint ic_dbus_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *const *ic_dbus_service_get_available_providers (IcDbusService *object);
gchar **ic_dbus_service_dup_available_providers (IcDbusService *object);
void ic_dbus_service_set_available_providers (IcDbusService *object, const gchar *const *value);


/* ---- */

#define IC_DBUS_TYPE_SERVICE_PROXY (ic_dbus_service_proxy_get_type ())
#define IC_DBUS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_SERVICE_PROXY, IcDbusServiceProxy))
#define IC_DBUS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_DBUS_TYPE_SERVICE_PROXY, IcDbusServiceProxyClass))
#define IC_DBUS_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_DBUS_TYPE_SERVICE_PROXY, IcDbusServiceProxyClass))
#define IC_DBUS_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_SERVICE_PROXY))
#define IC_DBUS_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_DBUS_TYPE_SERVICE_PROXY))

typedef struct _IcDbusServiceProxy IcDbusServiceProxy;
typedef struct _IcDbusServiceProxyClass IcDbusServiceProxyClass;
typedef struct _IcDbusServiceProxyPrivate IcDbusServiceProxyPrivate;

struct _IcDbusServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  IcDbusServiceProxyPrivate *priv;
};

struct _IcDbusServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType ic_dbus_service_proxy_get_type (void) G_GNUC_CONST;

void ic_dbus_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IcDbusService *ic_dbus_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
IcDbusService *ic_dbus_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ic_dbus_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IcDbusService *ic_dbus_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
IcDbusService *ic_dbus_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define IC_DBUS_TYPE_SERVICE_SKELETON (ic_dbus_service_skeleton_get_type ())
#define IC_DBUS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_SERVICE_SKELETON, IcDbusServiceSkeleton))
#define IC_DBUS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_DBUS_TYPE_SERVICE_SKELETON, IcDbusServiceSkeletonClass))
#define IC_DBUS_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_DBUS_TYPE_SERVICE_SKELETON, IcDbusServiceSkeletonClass))
#define IC_DBUS_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_SERVICE_SKELETON))
#define IC_DBUS_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_DBUS_TYPE_SERVICE_SKELETON))

typedef struct _IcDbusServiceSkeleton IcDbusServiceSkeleton;
typedef struct _IcDbusServiceSkeletonClass IcDbusServiceSkeletonClass;
typedef struct _IcDbusServiceSkeletonPrivate IcDbusServiceSkeletonPrivate;

struct _IcDbusServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  IcDbusServiceSkeletonPrivate *priv;
};

struct _IcDbusServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ic_dbus_service_skeleton_get_type (void) G_GNUC_CONST;

IcDbusService *ic_dbus_service_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.IdentityConfig.Provider */

#define IC_DBUS_TYPE_PROVIDER (ic_dbus_provider_get_type ())
#define IC_DBUS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_PROVIDER, IcDbusProvider))
#define IC_DBUS_IS_PROVIDER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_PROVIDER))
#define IC_DBUS_PROVIDER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), IC_DBUS_TYPE_PROVIDER, IcDbusProviderIface))

struct _IcDbusProvider;
typedef struct _IcDbusProvider IcDbusProvider;
typedef struct _IcDbusProviderIface IcDbusProviderIface;

struct _IcDbusProviderIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_discover_provider) (
    IcDbusProvider *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_string);

  const gchar * (*get_provider_interface) (IcDbusProvider *object);

  void (*diagnostics) (
    IcDbusProvider *object,
    const gchar *arg_data);

};

GType ic_dbus_provider_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ic_dbus_provider_interface_info (void);
guint ic_dbus_provider_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ic_dbus_provider_complete_discover_provider (
    IcDbusProvider *object,
    GDBusMethodInvocation *invocation,
    gint match);



/* D-Bus signal emissions functions: */
void ic_dbus_provider_emit_diagnostics (
    IcDbusProvider *object,
    const gchar *arg_data);



/* D-Bus method calls: */
void ic_dbus_provider_call_discover_provider (
    IcDbusProvider *proxy,
    const gchar *arg_string,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_provider_call_discover_provider_finish (
    IcDbusProvider *proxy,
    gint *out_match,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_provider_call_discover_provider_sync (
    IcDbusProvider *proxy,
    const gchar *arg_string,
    gint *out_match,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *ic_dbus_provider_get_provider_interface (IcDbusProvider *object);
gchar *ic_dbus_provider_dup_provider_interface (IcDbusProvider *object);
void ic_dbus_provider_set_provider_interface (IcDbusProvider *object, const gchar *value);


/* ---- */

#define IC_DBUS_TYPE_PROVIDER_PROXY (ic_dbus_provider_proxy_get_type ())
#define IC_DBUS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_PROVIDER_PROXY, IcDbusProviderProxy))
#define IC_DBUS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_DBUS_TYPE_PROVIDER_PROXY, IcDbusProviderProxyClass))
#define IC_DBUS_PROVIDER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_DBUS_TYPE_PROVIDER_PROXY, IcDbusProviderProxyClass))
#define IC_DBUS_IS_PROVIDER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_PROVIDER_PROXY))
#define IC_DBUS_IS_PROVIDER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_DBUS_TYPE_PROVIDER_PROXY))

typedef struct _IcDbusProviderProxy IcDbusProviderProxy;
typedef struct _IcDbusProviderProxyClass IcDbusProviderProxyClass;
typedef struct _IcDbusProviderProxyPrivate IcDbusProviderProxyPrivate;

struct _IcDbusProviderProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  IcDbusProviderProxyPrivate *priv;
};

struct _IcDbusProviderProxyClass
{
  GDBusProxyClass parent_class;
};

GType ic_dbus_provider_proxy_get_type (void) G_GNUC_CONST;

void ic_dbus_provider_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IcDbusProvider *ic_dbus_provider_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
IcDbusProvider *ic_dbus_provider_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ic_dbus_provider_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IcDbusProvider *ic_dbus_provider_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
IcDbusProvider *ic_dbus_provider_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define IC_DBUS_TYPE_PROVIDER_SKELETON (ic_dbus_provider_skeleton_get_type ())
#define IC_DBUS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_PROVIDER_SKELETON, IcDbusProviderSkeleton))
#define IC_DBUS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_DBUS_TYPE_PROVIDER_SKELETON, IcDbusProviderSkeletonClass))
#define IC_DBUS_PROVIDER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_DBUS_TYPE_PROVIDER_SKELETON, IcDbusProviderSkeletonClass))
#define IC_DBUS_IS_PROVIDER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_PROVIDER_SKELETON))
#define IC_DBUS_IS_PROVIDER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_DBUS_TYPE_PROVIDER_SKELETON))

typedef struct _IcDbusProviderSkeleton IcDbusProviderSkeleton;
typedef struct _IcDbusProviderSkeletonClass IcDbusProviderSkeletonClass;
typedef struct _IcDbusProviderSkeletonPrivate IcDbusProviderSkeletonPrivate;

struct _IcDbusProviderSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  IcDbusProviderSkeletonPrivate *priv;
};

struct _IcDbusProviderSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ic_dbus_provider_skeleton_get_type (void) G_GNUC_CONST;

IcDbusProvider *ic_dbus_provider_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.IdentityConfig.Kerberos */

#define IC_DBUS_TYPE_KERBEROS (ic_dbus_kerberos_get_type ())
#define IC_DBUS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_KERBEROS, IcDbusKerberos))
#define IC_DBUS_IS_KERBEROS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_KERBEROS))
#define IC_DBUS_KERBEROS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), IC_DBUS_TYPE_KERBEROS, IcDbusKerberosIface))

struct _IcDbusKerberos;
typedef struct _IcDbusKerberos IcDbusKerberos;
typedef struct _IcDbusKerberosIface IcDbusKerberosIface;

struct _IcDbusKerberosIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_enroll_machine) (
    IcDbusKerberos *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  gboolean (*handle_unenroll_machine) (
    IcDbusKerberos *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_params);

  const gchar *const * (*get_enroll_params) (IcDbusKerberos *object);

  const gchar * (*get_enrolled_realm) (IcDbusKerberos *object);

  const gchar *const * (*get_unenroll_params) (IcDbusKerberos *object);

};

GType ic_dbus_kerberos_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ic_dbus_kerberos_interface_info (void);
guint ic_dbus_kerberos_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ic_dbus_kerberos_complete_enroll_machine (
    IcDbusKerberos *object,
    GDBusMethodInvocation *invocation);

void ic_dbus_kerberos_complete_unenroll_machine (
    IcDbusKerberos *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void ic_dbus_kerberos_call_enroll_machine (
    IcDbusKerberos *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_kerberos_call_enroll_machine_finish (
    IcDbusKerberos *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_kerberos_call_enroll_machine_sync (
    IcDbusKerberos *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);

void ic_dbus_kerberos_call_unenroll_machine (
    IcDbusKerberos *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ic_dbus_kerberos_call_unenroll_machine_finish (
    IcDbusKerberos *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ic_dbus_kerberos_call_unenroll_machine_sync (
    IcDbusKerberos *proxy,
    GVariant *arg_params,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *ic_dbus_kerberos_get_enrolled_realm (IcDbusKerberos *object);
gchar *ic_dbus_kerberos_dup_enrolled_realm (IcDbusKerberos *object);
void ic_dbus_kerberos_set_enrolled_realm (IcDbusKerberos *object, const gchar *value);

const gchar *const *ic_dbus_kerberos_get_enroll_params (IcDbusKerberos *object);
gchar **ic_dbus_kerberos_dup_enroll_params (IcDbusKerberos *object);
void ic_dbus_kerberos_set_enroll_params (IcDbusKerberos *object, const gchar *const *value);

const gchar *const *ic_dbus_kerberos_get_unenroll_params (IcDbusKerberos *object);
gchar **ic_dbus_kerberos_dup_unenroll_params (IcDbusKerberos *object);
void ic_dbus_kerberos_set_unenroll_params (IcDbusKerberos *object, const gchar *const *value);


/* ---- */

#define IC_DBUS_TYPE_KERBEROS_PROXY (ic_dbus_kerberos_proxy_get_type ())
#define IC_DBUS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_KERBEROS_PROXY, IcDbusKerberosProxy))
#define IC_DBUS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_DBUS_TYPE_KERBEROS_PROXY, IcDbusKerberosProxyClass))
#define IC_DBUS_KERBEROS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_DBUS_TYPE_KERBEROS_PROXY, IcDbusKerberosProxyClass))
#define IC_DBUS_IS_KERBEROS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_KERBEROS_PROXY))
#define IC_DBUS_IS_KERBEROS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_DBUS_TYPE_KERBEROS_PROXY))

typedef struct _IcDbusKerberosProxy IcDbusKerberosProxy;
typedef struct _IcDbusKerberosProxyClass IcDbusKerberosProxyClass;
typedef struct _IcDbusKerberosProxyPrivate IcDbusKerberosProxyPrivate;

struct _IcDbusKerberosProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  IcDbusKerberosProxyPrivate *priv;
};

struct _IcDbusKerberosProxyClass
{
  GDBusProxyClass parent_class;
};

GType ic_dbus_kerberos_proxy_get_type (void) G_GNUC_CONST;

void ic_dbus_kerberos_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IcDbusKerberos *ic_dbus_kerberos_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
IcDbusKerberos *ic_dbus_kerberos_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ic_dbus_kerberos_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
IcDbusKerberos *ic_dbus_kerberos_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
IcDbusKerberos *ic_dbus_kerberos_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define IC_DBUS_TYPE_KERBEROS_SKELETON (ic_dbus_kerberos_skeleton_get_type ())
#define IC_DBUS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), IC_DBUS_TYPE_KERBEROS_SKELETON, IcDbusKerberosSkeleton))
#define IC_DBUS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), IC_DBUS_TYPE_KERBEROS_SKELETON, IcDbusKerberosSkeletonClass))
#define IC_DBUS_KERBEROS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), IC_DBUS_TYPE_KERBEROS_SKELETON, IcDbusKerberosSkeletonClass))
#define IC_DBUS_IS_KERBEROS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), IC_DBUS_TYPE_KERBEROS_SKELETON))
#define IC_DBUS_IS_KERBEROS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), IC_DBUS_TYPE_KERBEROS_SKELETON))

typedef struct _IcDbusKerberosSkeleton IcDbusKerberosSkeleton;
typedef struct _IcDbusKerberosSkeletonClass IcDbusKerberosSkeletonClass;
typedef struct _IcDbusKerberosSkeletonPrivate IcDbusKerberosSkeletonPrivate;

struct _IcDbusKerberosSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  IcDbusKerberosSkeletonPrivate *priv;
};

struct _IcDbusKerberosSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ic_dbus_kerberos_skeleton_get_type (void) G_GNUC_CONST;

IcDbusKerberos *ic_dbus_kerberos_skeleton_new (void);


G_END_DECLS

#endif /* __IC_DBUS_GENERATED_H__ */
